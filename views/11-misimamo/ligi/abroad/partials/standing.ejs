<div class="table-section" itemscope itemtype="https://schema.org/Table">
    <h2 class="h2 fs-6" itemprop="about">Msimamo wa <%= partials.league_name %> - <%= partials.ligi %>
        <%= partials.season_long %>
    </h2>
    <% if (Array.isArray(standing.standing) && standing.standing.length > 0) { %>
    <% if (Array.isArray(standing.standing[0])) { %>
    <%- include('./groups-league.ejs') %>
    <% } %>
    <% if (typeof standing.standing[0] === 'object' && standing.standing[0] !== null && !Array.isArray(standing.standing[0])) { %>
    <%- include('./leagues.ejs') %>
    <% } %>
    <% } %>
    <div id="explanations"></div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let status_expl = []
        // Get all table cells with class td_desc
        const tableCells = document.querySelectorAll('td.td_desc');

        // Loop through each cell
        tableCells.forEach(cell => {
            const description = cell.getAttribute('title')?.toLowerCase() || '';
            const league_id = cell.getAttribute('data-league_id')?.toLowerCase() || '';

            // Add appropriate classes based on description content
            let second_ligs = ['caf confederation cup']
            if (description.includes('europa') || second_ligs.some(lig => description.includes(lig)) || (description == "playoffs" && league_id == "20")) {
                cell.classList.add('europa');
                status_expl.push({ description: cell.getAttribute('title'), class: 'europa' });
            }

            if (description.includes('champions league')) {
                cell.classList.add('champions');
                status_expl.push({ description: cell.getAttribute('title'), class: 'champions' });
            }

            if (description.includes('relegation')) {
                cell.classList.add('relegation');
                status_expl.push({ description: cell.getAttribute('title'), class: 'relegation' });
            }

            if (description.includes('conference')) {
                cell.classList.add('conference');
                status_expl.push({ description: cell.getAttribute('title'), class: 'conference' });
            }
        });

        //remove duplicates from status_expl array
        status_expl = status_expl.filter((value, index, self) =>
            index === self.findIndex((t) => (
                t.description === value.description && t.class === value.class
            ))
        );

        //get #explanations div then create a new flex div for each status_expl item inside it, inside the flex div create two spans, one for the class and one for the description, the class span should have width: 20px and height: 20px and the description span should have margin-left: 5px, all spans should be display: inline-block
        const explanationsDiv = document.getElementById('explanations');

        for (let status of status_expl) {
            const className = status.class;
            const descriptionText = status.description;

            // Create a new flex div for each status
            const flexDiv = document.createElement('div');
            flexDiv.style.display = 'flex';
            flexDiv.style.flexWrap = 'wrap';
            flexDiv.style.marginBottom = '10px';
            flexDiv.style.alignItems = 'center';
            flexDiv.style.justifyContent = 'flex-start';
            flexDiv.style.gap = '10px';
            flexDiv.style.fontSize = '12px';
            flexDiv.style.fontFamily = 'Arial, sans-serif';

            // Create a span for the class
            const classSpan = document.createElement('span');
            classSpan.className = className;
            classSpan.classList.add('rounded')
            classSpan.style.width = '16px';
            classSpan.style.height = '16px';
            classSpan.style.display = 'inline-block';

            // Create a span for the description
            const descriptionSpan = document.createElement('span');
            descriptionSpan.textContent = descriptionText;
            descriptionSpan.style.marginLeft = '1px';
            descriptionSpan.style.display = 'inline-block';

            // Append spans to the flex div
            flexDiv.appendChild(classSpan);
            flexDiv.appendChild(descriptionSpan);

            // Append the flex div to the explanations div
            explanationsDiv.appendChild(flexDiv);
        }
    });
</script>